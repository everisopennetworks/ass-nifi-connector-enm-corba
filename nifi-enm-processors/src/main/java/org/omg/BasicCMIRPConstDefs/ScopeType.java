package org.omg.BasicCMIRPConstDefs;


/**
* org.omg.BasicCMIRPConstDefs/ScopeType.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from org.omg.BasicCMIRPConstDefs.idl
* jueves 5 de septiembre de 2019 02:15:01 AM CDT
*/


/**
     * ScopeType defines the kind of scope to use in a search
     * together with SearchControl.level, in a SearchControl value.
     *
     * SearchControl.level is always >= 0. If a level is bigger than the
     * depth of the tree there will be no exceptions thrown.
     * BASE_ONLY: level ignored, just return the base object.
     * BASE_NTH_LEVEL: return all subordinate objects that are on "level"
     * distance from the base object, where 0 is the base object.
     * BASE_SUBTREE: return the base object and all of its subordinates
     * down to and including the nth level.
     * BASE_ALL: level ignored, return the base object and all of it's
     * subordinates.
     */
public class ScopeType implements org.omg.CORBA.portable.IDLEntity
{
  private        int __value;
  private static int __size = 4;
  private static ScopeType[] __array = new ScopeType [__size];

  public static final int _BASE_ONLY = 0;
  public static final ScopeType BASE_ONLY = new ScopeType(_BASE_ONLY);
  public static final int _BASE_NTH_LEVEL = 1;
  public static final ScopeType BASE_NTH_LEVEL = new ScopeType(_BASE_NTH_LEVEL);
  public static final int _BASE_SUBTREE = 2;
  public static final ScopeType BASE_SUBTREE = new ScopeType(_BASE_SUBTREE);
  public static final int _BASE_ALL = 3;
  public static final ScopeType BASE_ALL = new ScopeType(_BASE_ALL);

  public int value ()
  {
    return __value;
  }

  public static ScopeType from_int (int value)
  {
    if (value >= 0 && value < __size)
      return __array[value];
    else
      throw new org.omg.CORBA.BAD_PARAM ();
  }

  protected ScopeType (int value)
  {
    __value = value;
    __array[__value] = this;
  }
} // class ScopeType
