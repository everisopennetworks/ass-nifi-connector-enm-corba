package org.omg.KernelCmConstDefs;


/**
* org.omg.KernelCmConstDefs/ScopeTypeHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from org.omg.KernelCmConstDefs.idl
* jueves 5 de septiembre de 2019 02:19:32 AM CDT
*/


/**
     * ScopeType defines the kind of scope to use in a CM synchronization
     * request together with ScopePara.level, in the SCOPE field.
     *
     * ScopePara.level is always >= 0. If a level is bigger than the
     * depth of the tree there will be no exceptions thrown.
     * BASE_ONLY: level ignored, just return the base object.
     * BASE_NTH_LEVEL: return all subordinate objects that are on "level"
     * distance from the base object, where 0 is the base object.
     * BASE_SUBTREE: return the base object and all of its subordinates
     * down to and including the nth level.
     * BASE_ALL: level ignored, return the base object and all of it's
     * subordinates.
     */
abstract public class ScopeTypeHelper
{
  private static String  _id = "IDL:3gppsa5.org/KernelCmConstDefs/ScopeType:1.0";

  public static void insert (org.omg.CORBA.Any a, ScopeType that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static ScopeType extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_enum_tc (ScopeTypeHelper.id (), "ScopeType", new String[] { "BASE_ONLY", "BASE_NTH_LEVEL", "BASE_SUBTREE", "BASE_ALL"} );
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static ScopeType read (org.omg.CORBA.portable.InputStream istream)
  {
    return ScopeType.from_int (istream.read_long ());
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, ScopeType value)
  {
    ostream.write_long (value.value ());
  }

}
