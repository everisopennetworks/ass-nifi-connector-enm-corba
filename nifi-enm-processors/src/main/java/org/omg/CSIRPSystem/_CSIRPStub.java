package org.omg.CSIRPSystem;


/**
* org.omg.CSIRPSystem/_CSIRPStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from org.omg.CSIRPSystem.idl
* jueves 5 de septiembre de 2019 02:17:03 AM CDT
*/

public class _CSIRPStub extends org.omg.CORBA.portable.ObjectImpl implements CSIRP
{


  /**
     * IRPManager invokes this operation to obtain the current 
     * heartbeat period.
     */
  public org.omg.CSIRPConstDefs.ResultType get_heartbeat_period (org.omg.CORBA.ShortHolder heartbeatPeriod) throws GetHeartbeatPeriod
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_heartbeat_period", true);
                $in = _invoke ($out);
                org.omg.CSIRPConstDefs.ResultType $result = org.omg.CSIRPConstDefs.ResultTypeHelper.read ($in);
                heartbeatPeriod.value = org.omg.CSIRPConstDefs.HeartbeatPeriodTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/GetHeartbeatPeriod:1.0"))
                    throw GetHeartbeatPeriodHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_heartbeat_period (heartbeatPeriod        );
            } finally {
                _releaseReply ($in);
            }
  } // get_heartbeat_period


  /**
     * IRPManager invokes this operation to set the heartbeatPeriod.
     * If the heartbeatPeriod is modified by one IRPManager, a
     * notifyHeartbeat notification should be emitted
     * immediately to all the subscribed IRPManagers to indicate
     * the new heartbeatPeriod. If the heartbeatPeriod is set to
     * zero, one notifyHeartbeat notification will be
     * emitted immediately and no more 
     * notifications unless the heartbeatPeriod is modified again.
     */
  public org.omg.CSIRPConstDefs.ResultType set_heartbeat_period (short heartbeatPeriod) throws SetHeartbeatPeriod, ConflictingHeartbeatPeriod, InvalidHeartbeatPeriod, org.omg.ManagedGenericIRPSystem.ValueNotSupported, org.omg.ManagedGenericIRPSystem.OperationNotSupported
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("set_heartbeat_period", true);
                org.omg.CSIRPConstDefs.HeartbeatPeriodTypeHelper.write ($out, heartbeatPeriod);
                $in = _invoke ($out);
                org.omg.CSIRPConstDefs.ResultType $result = org.omg.CSIRPConstDefs.ResultTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/SetHeartbeatPeriod:1.0"))
                    throw SetHeartbeatPeriodHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/ConflictingHeartbeatPeriod:1.0"))
                    throw ConflictingHeartbeatPeriodHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/InvalidHeartbeatPeriod:1.0"))
                    throw InvalidHeartbeatPeriodHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/ValueNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.ValueNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return set_heartbeat_period (heartbeatPeriod        );
            } finally {
                _releaseReply ($in);
            }
  } // set_heartbeat_period


  /*
     * IRPManager invoke this operation to trigger ET_HEARTBEAT 
     * notification positively.
     */
  public org.omg.CSIRPConstDefs.ResultType trigger_heartbeat (String managerIdentifier) throws TriggerHeartbeat, InvalidManagerIdentifier
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("trigger_heartbeat", true);
                org.omg.CSIRPConstDefs.ManagerIdentifierTypeHelper.write ($out, managerIdentifier);
                $in = _invoke ($out);
                org.omg.CSIRPConstDefs.ResultType $result = org.omg.CSIRPConstDefs.ResultTypeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/TriggerHeartbeat:1.0"))
                    throw TriggerHeartbeatHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/InvalidManagerIdentifier:1.0"))
                    throw InvalidManagerIdentifierHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return trigger_heartbeat (managerIdentifier        );
            } finally {
                _releaseReply ($in);
            }
  } // trigger_heartbeat


  /**
     * Return the list of all supported CSIRP versions.
     */
  public String[] get_CS_IRP_versions () throws GetCSIRPVersions
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_CS_IRP_versions", true);
                $in = _invoke ($out);
                String $result[] = org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/GetCSIRPVersions:1.0"))
                    throw GetCSIRPVersionsHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_CS_IRP_versions (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_CS_IRP_versions


  /**
     * Return the list of all supported operations and their supported
     * parameters for a specific CSIRP version.
     */
  public org.omg.ManagedGenericIRPConstDefs.Method[] get_CS_IRP_operations_profile (String iRPVersion) throws GetCSIRPOperationsProfile, org.omg.ManagedGenericIRPSystem.OperationNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_CS_IRP_operations_profile", true);
                org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.write ($out, iRPVersion);
                $in = _invoke ($out);
                org.omg.ManagedGenericIRPConstDefs.Method $result[] = org.omg.ManagedGenericIRPConstDefs.MethodListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/GetCSIRPOperationsProfile:1.0"))
                    throw GetCSIRPOperationsProfileHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_CS_IRP_operations_profile (iRPVersion        );
            } finally {
                _releaseReply ($in);
            }
  } // get_CS_IRP_operations_profile


  /**
     * Return the list of all supported notifications and their supported
     * parameters for a specific CSIRP version.
     */
  public org.omg.ManagedGenericIRPConstDefs.Method[] get_CS_IRP_notification_profile (String iRPVersion) throws GetCSIRPNotificationProfile, org.omg.ManagedGenericIRPSystem.OperationNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_CS_IRP_notification_profile", true);
                org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.write ($out, iRPVersion);
                $in = _invoke ($out);
                org.omg.ManagedGenericIRPConstDefs.Method $result[] = org.omg.ManagedGenericIRPConstDefs.MethodListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/CSIRPSystem/GetCSIRPNotificationProfile:1.0"))
                    throw GetCSIRPNotificationProfileHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_CS_IRP_notification_profile (iRPVersion        );
            } finally {
                _releaseReply ($in);
            }
  } // get_CS_IRP_notification_profile

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/CSIRPSystem/CSIRP:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _CSIRPStub
