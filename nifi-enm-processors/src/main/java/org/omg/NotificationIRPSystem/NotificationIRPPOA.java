package org.omg.NotificationIRPSystem;


/**
* org.omg.NotificationIRPSystem/NotificationIRPPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from org.omg.NotificationIRPSystem.idl
* jueves 5 de septiembre de 2019 01:39:37 AM CDT
*/

public abstract class NotificationIRPPOA extends org.omg.PortableServer.Servant
 implements NotificationIRPOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("get_notification_IRP_versions", new Integer (0));
    _methods.put ("get_notification_IRP_operations_profile", new Integer (1));
    _methods.put ("get_notification_IRP_notification_profile", new Integer (2));
    _methods.put ("get_notification_categories", new Integer (3));
    _methods.put ("attach_push", new Integer (4));
    _methods.put ("attach_push_b", new Integer (5));
    _methods.put ("attach_pull", new Integer (6));
    _methods.put ("change_subscription_filter", new Integer (7));
    _methods.put ("get_subscription_status", new Integer (8));
    _methods.put ("get_subscription_ids", new Integer (9));
    _methods.put ("detach", new Integer (10));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /*
      Return the list of all supported Notification IRP versions
      Each IRPVersion is defined by the rule in TS 32.311 clause titled
      "IRP document version number string"
      */
       case 0:  // org.omg.NotificationIRPSystem/NotificationIRP/get_notification_IRP_versions
       {
         try {
           String $result[] = null;
           $result = this.get_notification_IRP_versions ();
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.write (out, $result);
         } catch (GetNotificationIRPVersions $ex) {
           out = $rh.createExceptionReply ();
           GetNotificationIRPVersionsHelper.write (out, $ex);
         }
         break;
       }


  /*
      Return the list of all supported operations and their supported
      parameters for a specific Notification IRP version.
      */
       case 1:  // org.omg.NotificationIRPSystem/NotificationIRP/get_notification_IRP_operations_profile
       {
         try {
           String notification_irp_version = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_notification_IRP_operations_profile (notification_irp_version);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetNotificationIRPOperationsProfile $ex) {
           out = $rh.createExceptionReply ();
           GetNotificationIRPOperationsProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /*
      Return the list of all supported notifications.
      Agent should always throw a org.omg.ManagedGenericIRPSystem::OperationNotSupported
      exception.  
      Similar method, such as get_alarm_IRP_notification_profile,
      is supported in other IRP versions such as Alarm IRP.
      */
       case 2:  // org.omg.NotificationIRPSystem/NotificationIRP/get_notification_IRP_notification_profile
       {
         try {
           String notification_irp_version = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_notification_IRP_notification_profile (notification_irp_version);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetNotificationIRPNotificationProfile $ex) {
           out = $rh.createExceptionReply ();
           GetNotificationIRPNotificationProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /*
      Obtain the list of all supported notification categories.
      */
       case 3:  // org.omg.NotificationIRPSystem/NotificationIRP/get_notification_categories
       {
         try {
           org.omg.NotificationIRPConstDefs.NotificationTypesSetHolder notification_type_list = new org.omg.NotificationIRPConstDefs.NotificationTypesSetHolder ();
           String $result[] = null;
           $result = this.get_notification_categories (notification_type_list);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.write (out, $result);
           org.omg.NotificationIRPConstDefs.NotificationTypesSetHelper.write (out, notification_type_list.value);
         } catch (GetNotificationCategories $ex) {
           out = $rh.createExceptionReply ();
           GetNotificationCategoriesHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // org.omg.NotificationIRPSystem/NotificationIRP/attach_push
       {
         try {
           String manager_reference = in.read_string ();
           int time_tick = in.read_ulong ();
           String notification_categories[] = org.omg.NotificationIRPConstDefs.NotificationCategorySetHelper.read (in);
           //org.omg.ManagedGenericIRPConstDefs.StringTypeOpt filter = org.omg.ManagedGenericIRPConstDefs.StringTypeOptHelper.read (in);
           String filter="";
           String $result = null;
           org.omg.CORBA.Object ob = null;
           $result = this.attach_push (ob, time_tick, notification_categories, filter);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Attach $ex) {
           out = $rh.createExceptionReply ();
           AttachHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (AlreadySubscribed $ex) {
           out = $rh.createExceptionReply ();
           AlreadySubscribedHelper.write (out, $ex);
         } catch (AtLeastOneNotificationCategoryNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AtLeastOneNotificationCategoryNotSupportedHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // org.omg.NotificationIRPSystem/NotificationIRP/attach_push_b
       {
         try {
           String manager_reference = in.read_string ();
           int time_tick = in.read_ulong ();
           String notification_categories[] = org.omg.NotificationIRPConstDefs.NotificationCategorySetHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.StringTypeOpt filter = org.omg.ManagedGenericIRPConstDefs.StringTypeOptHelper.read (in);
           org.omg.CosNotifyChannelAdmin.SequenceProxyPushSupplierHolder system_reference = new org.omg.CosNotifyChannelAdmin.SequenceProxyPushSupplierHolder ();
           String $result = null;
           $result = this.attach_push_b (manager_reference, time_tick, notification_categories, filter, system_reference);
           out = $rh.createReply();
           out.write_string ($result);
           org.omg.CosNotifyChannelAdmin.SequenceProxyPushSupplierHelper.write (out, system_reference.value);
         } catch (Attach $ex) {
           out = $rh.createExceptionReply ();
           AttachHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (AlreadySubscribed $ex) {
           out = $rh.createExceptionReply ();
           AlreadySubscribedHelper.write (out, $ex);
         } catch (AtLeastOneNotificationCategoryNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AtLeastOneNotificationCategoryNotSupportedHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // org.omg.NotificationIRPSystem/NotificationIRP/attach_pull
       {
         try {
           String manager_reference = in.read_string ();
           int time_tick = in.read_ulong ();
           String notification_categories[] = org.omg.NotificationIRPConstDefs.NotificationCategorySetHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.StringTypeOpt filter = org.omg.ManagedGenericIRPConstDefs.StringTypeOptHelper.read (in);
           org.omg.CosNotifyChannelAdmin.SequenceProxyPullSupplierHolder system_reference = new org.omg.CosNotifyChannelAdmin.SequenceProxyPullSupplierHolder ();
           String $result = null;
           $result = this.attach_pull (manager_reference, time_tick, notification_categories, filter, system_reference);
           out = $rh.createReply();
           out.write_string ($result);
           org.omg.CosNotifyChannelAdmin.SequenceProxyPullSupplierHelper.write (out, system_reference.value);
         } catch (Attach $ex) {
           out = $rh.createExceptionReply ();
           AttachHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (AlreadySubscribed $ex) {
           out = $rh.createExceptionReply ();
           AlreadySubscribedHelper.write (out, $ex);
         } catch (AtLeastOneNotificationCategoryNotSupported $ex) {
           out = $rh.createExceptionReply ();
           AtLeastOneNotificationCategoryNotSupportedHelper.write (out, $ex);
         }
         break;
       }


  /*
      Replace the present filter constraint with the one provided.
      */
       case 7:  // org.omg.NotificationIRPSystem/NotificationIRP/change_subscription_filter
       {
         try {
           String subscription_id = org.omg.NotificationIRPConstDefs.SubscriptionIdHelper.read (in);
           String filter = in.read_string ();
           this.change_subscription_filter (subscription_id, filter);
           out = $rh.createReply();
         } catch (ChangeSubscriptionFilter $ex) {
           out = $rh.createExceptionReply ();
           ChangeSubscriptionFilterHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /*
      Check the current state of the subscription.
      */
       case 8:  // org.omg.NotificationIRPSystem/NotificationIRP/get_subscription_status
       {
         try {
           String subscription_id = org.omg.NotificationIRPConstDefs.SubscriptionIdHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.StringTypeOptHolder filter_in_effect = new org.omg.ManagedGenericIRPConstDefs.StringTypeOptHolder ();
           org.omg.NotificationIRPConstDefs.SubscriptionStateHolder subscription_state = new org.omg.NotificationIRPConstDefs.SubscriptionStateHolder ();
           org.omg.CORBA.IntHolder time_tick = new org.omg.CORBA.IntHolder ();
           String $result[] = null;
           $result = this.get_subscription_status (subscription_id, filter_in_effect, subscription_state, time_tick);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.write (out, $result);
           org.omg.ManagedGenericIRPConstDefs.StringTypeOptHelper.write (out, filter_in_effect.value);
           org.omg.NotificationIRPConstDefs.SubscriptionStateHelper.write (out, subscription_state.value);
           out.write_ulong (time_tick.value);
         } catch (GetSubscriptionStatus $ex) {
           out = $rh.createExceptionReply ();
           GetSubscriptionStatusHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // org.omg.NotificationIRPSystem/NotificationIRP/get_subscription_ids
       {
         try {
           String manager_reference = in.read_string ();
           String $result[] = null;
           $result = this.get_subscription_ids (manager_reference);
           out = $rh.createReply();
           org.omg.NotificationIRPConstDefs.SubscriptionIdSetHelper.write (out, $result);
         } catch (GetSubscriptionIds $ex) {
           out = $rh.createExceptionReply ();
           GetSubscriptionIdsHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /*
      Terminates the subscription with the agent.
      */
       case 10:  // org.omg.NotificationIRPSystem/NotificationIRP/detach
       {
         try {
           String manager_reference = in.read_string ();
           String subscription_id = org.omg.NotificationIRPConstDefs.SubscriptionIdHelper.read (in);
           this.detach (manager_reference, subscription_id);
           out = $rh.createReply();
         } catch (DetachException $ex) {
           out = $rh.createExceptionReply ();
           DetachExceptionHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/NotificationIRPSystem/NotificationIRP:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public NotificationIRP _this() 
  {
    return NotificationIRPHelper.narrow(
    super._this_object());
  }

  public NotificationIRP _this(org.omg.CORBA.ORB orb) 
  {
    return NotificationIRPHelper.narrow(
    super._this_object(orb));
  }


} // class NotificationIRPPOA
