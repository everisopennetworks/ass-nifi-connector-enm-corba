package org.omg.FileTransferIRPSystem;


import org.omg.TimeBase.UtcT;

/**
* org.omg.FileTransferIRPSystem/FileTransferIRPPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from org.omg.FileTransferIRPSystem.idl
* jueves 5 de septiembre de 2019 02:18:30 AM CDT
*/

public abstract class FileTransferIRPPOA extends org.omg.PortableServer.Servant
 implements FileTransferIRPOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("list_available_files", new Integer (0));
    _methods.put ("file_download_indication", new Integer (1));
    _methods.put ("get_file_transfer_irp_versions", new Integer (2));
    _methods.put ("get_file_transfer_irp_operations_profile", new Integer (3));
    _methods.put ("get_file_transfer_irp_notifications_profile", new Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /*
      * IRPManager invoke this operation to get the files information
      */
       case 0:  // org.omg.FileTransferIRPSystem/FileTransferIRP/list_available_files
       {
         try {
           short management_data_type = in.read_short ();
           UtcT begin_time = org.omg.FileTransferIRPConstDefs.UTCTimeHelper.read (in);
           UtcT end_time = org.omg.FileTransferIRPConstDefs.UTCTimeHelper.read (in);
           org.omg.FileTransferIRPConstDefs.FileInfoListHolder file_info_list = new org.omg.FileTransferIRPConstDefs.FileInfoListHolder ();
           org.omg.FileTransferIRPConstDefs.Result $result = null;
           $result = this.list_available_files (management_data_type, begin_time, end_time, file_info_list);
           out = $rh.createReply();
           org.omg.FileTransferIRPConstDefs.ResultHelper.write (out, $result);
           org.omg.FileTransferIRPConstDefs.FileInfoListHelper.write (out, file_info_list.value);
         } catch (ListAvailableFiles $ex) {
           out = $rh.createExceptionReply ();
           ListAvailableFilesHelper.write (out, $ex);
         } catch (InvalidTimes $ex) {
           out = $rh.createExceptionReply ();
           InvalidTimesHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /*
      * IRPManager invoke this operation to indicate completion of downloading files to IRPAgent
      */
       case 1:  // org.omg.FileTransferIRPSystem/FileTransferIRP/file_download_indication
       {
         try {
           org.omg.FileTransferIRPConstDefs.FileInfo file_info_list[] = org.omg.FileTransferIRPConstDefs.FileInfoListHelper.read (in);
           org.omg.FileTransferIRPConstDefs.Result $result = null;
           $result = this.file_download_indication (file_info_list);
           out = $rh.createReply();
           org.omg.FileTransferIRPConstDefs.ResultHelper.write (out, $result);
         } catch (FileDownloadIndication $ex) {
           out = $rh.createExceptionReply ();
           FileDownloadIndicationHelper.write (out, $ex);
         } catch (InvalidFileInfoList $ex) {
           out = $rh.createExceptionReply ();
           InvalidFileInfoListHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Return the list of all supported FileTransferIRP versions.
      */
       case 2:  // org.omg.FileTransferIRPSystem/FileTransferIRP/get_file_transfer_irp_versions
       {
         try {
           String $result[] = null;
           $result = this.get_file_transfer_irp_versions ();
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.write (out, $result);
         } catch (GetFileTransferIRPVersions $ex) {
           out = $rh.createExceptionReply ();
           GetFileTransferIRPVersionsHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Return the list of all supported operations and their supported
      * parameters for a specific FileTransferIRP version.
      */
       case 3:  // org.omg.FileTransferIRPSystem/FileTransferIRP/get_file_transfer_irp_operations_profile
       {
         try {
           String irp_version = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_file_transfer_irp_operations_profile (irp_version);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetFileTransferIRPOperationsProfile $ex) {
           out = $rh.createExceptionReply ();
           GetFileTransferIRPOperationsProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Return the list of all supported notifications and their supported
      * parameters for a specific FileTransferIRP version.
      */
       case 4:  // org.omg.FileTransferIRPSystem/FileTransferIRP/get_file_transfer_irp_notifications_profile
       {
         try {
           String irp_version = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_file_transfer_irp_notifications_profile (irp_version);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetFileTransferIRPNotificationsProfile $ex) {
           out = $rh.createExceptionReply ();
           GetFileTransferIRPNotificationsProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/FileTransferIRPSystem/FileTransferIRP:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public FileTransferIRP _this() 
  {
    return FileTransferIRPHelper.narrow(
    super._this_object());
  }

  public FileTransferIRP _this(org.omg.CORBA.ORB orb) 
  {
    return FileTransferIRPHelper.narrow(
    super._this_object(orb));
  }


} // class FileTransferIRPPOA
