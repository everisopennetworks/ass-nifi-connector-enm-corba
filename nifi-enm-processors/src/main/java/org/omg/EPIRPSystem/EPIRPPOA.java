package org.omg.EPIRPSystem;


/**
* org.omg.EPIRPSystem/EPIRPPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from org.omg.EPIRPSystem.idl
* jueves 5 de septiembre de 2019 02:17:21 AM CDT
*/


/*
  */
public abstract class EPIRPPOA extends org.omg.PortableServer.Servant
 implements EPIRPOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("get_IRP_outline", new Integer (0));
    _methods.put ("get_IRP_reference", new Integer (1));
    _methods.put ("release_IRP_reference", new Integer (2));
    _methods.put ("get_EP_IRP_versions", new Integer (3));
    _methods.put ("get_EP_IRP_operations_profile", new Integer (4));
    _methods.put ("get_EP_IRP_notification_profile", new Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * The IRPManager uses this operation to request the EPIRP to
     * return the outline information of the supported IRPs. The EPIRP
     * shall return the outline information of all the IRPs supported by the 
     * IRPAgent that contains the EPIRP. The EPIRP may 
     * additionally return the outline information of all the IRPs supported 
     * by other IRPAgents.
     */
       case 0:  // org.omg.EPIRPSystem/EPIRP/get_IRP_outline
       {
         try {
           String iRPVersion = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.EPIRPConstDefs.SupportedIRPListTypeHolder supportedIRPList = new org.omg.EPIRPConstDefs.SupportedIRPListTypeHolder ();
           org.omg.EPIRPConstDefs.ResultType $result = null;
           $result = this.get_IRP_outline (iRPVersion, supportedIRPList);
           out = $rh.createReply();
           org.omg.EPIRPConstDefs.ResultTypeHelper.write (out, $result);
           org.omg.EPIRPConstDefs.SupportedIRPListTypeHelper.write (out, supportedIRPList.value);
         } catch (GetIRPOutline $ex) {
           out = $rh.createExceptionReply ();
           GetIRPOutlineHelper.write (out, $ex);
         } catch (InvalidIRPVersion $ex) {
           out = $rh.createExceptionReply ();
           InvalidIRPVersionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * The IRPManager uses this operation to request the EPIRP to return
     * the stringified IOR of the IRP identified by systemDn and irpId.
     */
       case 1:  // org.omg.EPIRPSystem/EPIRP/get_IRP_reference
       {
         try {
           String managerIdentifier = org.omg.EPIRPConstDefs.ManagerIdentifierTypeHelper.read (in);
           String systemDn = org.omg.EPIRPConstDefs.DNTypeHelper.read (in);
           String irpId = org.omg.EPIRPConstDefs.IRPIdTypeHelper.read (in);
           org.omg.CORBA.StringHolder iRPReference = new org.omg.CORBA.StringHolder ();
           org.omg.EPIRPConstDefs.ResultType $result = null;
           $result = this.get_IRP_reference (managerIdentifier, systemDn, irpId, iRPReference);
           out = $rh.createReply();
           org.omg.EPIRPConstDefs.ResultTypeHelper.write (out, $result);
           out.write_string (iRPReference.value);
         } catch (GetIRPReference $ex) {
           out = $rh.createExceptionReply ();
           GetIRPReferenceHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /**
     * The IRPManager uses this operation to request the IRPAgent to
     * release a specific IRP reference. Whether the IRP reference
     * is really released or not in the IRPAgent is outside the 
     * scope of this document.
     */
       case 2:  // org.omg.EPIRPSystem/EPIRP/release_IRP_reference
       {
         try {
           String managerIdentifier = org.omg.EPIRPConstDefs.ManagerIdentifierTypeHelper.read (in);
           String iRPReference = in.read_string ();
           org.omg.EPIRPConstDefs.ResultType $result = null;
           $result = this.release_IRP_reference (managerIdentifier, iRPReference);
           out = $rh.createReply();
           org.omg.EPIRPConstDefs.ResultTypeHelper.write (out, $result);
         } catch (ReleaseIRPReference $ex) {
           out = $rh.createExceptionReply ();
           ReleaseIRPReferenceHelper.write (out, $ex);
         } catch (UnknownIRPReference $ex) {
           out = $rh.createExceptionReply ();
           UnknownIRPReferenceHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Return the list of all supported EPIRP versions.
      */
       case 3:  // org.omg.EPIRPSystem/EPIRP/get_EP_IRP_versions
       {
         try {
           String $result[] = null;
           $result = this.get_EP_IRP_versions ();
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.write (out, $result);
         } catch (GetEPIRPVersions $ex) {
           out = $rh.createExceptionReply ();
           GetEPIRPVersionsHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Return the list of all supported operations and their supported
      * parameters for a specific EPIRP version.
      */
       case 4:  // org.omg.EPIRPSystem/EPIRP/get_EP_IRP_operations_profile
       {
         try {
           String iRPVersion = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_EP_IRP_operations_profile (iRPVersion);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetEPIRPOperationsProfile $ex) {
           out = $rh.createExceptionReply ();
           GetEPIRPOperationsProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Return the list of all supported notifications and their supported
      * parameters for a specific EPIRP version.
      */
       case 5:  // org.omg.EPIRPSystem/EPIRP/get_EP_IRP_notification_profile
       {
         try {
           String iRPVersion = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_EP_IRP_notification_profile (iRPVersion);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetEPIRPNotificationProfile $ex) {
           out = $rh.createExceptionReply ();
           GetEPIRPNotificationProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/EPIRPSystem/EPIRP:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public EPIRP _this() 
  {
    return EPIRPHelper.narrow(
    super._this_object());
  }

  public EPIRP _this(org.omg.CORBA.ORB orb) 
  {
    return EPIRPHelper.narrow(
    super._this_object(orb));
  }


} // class EPIRPPOA
