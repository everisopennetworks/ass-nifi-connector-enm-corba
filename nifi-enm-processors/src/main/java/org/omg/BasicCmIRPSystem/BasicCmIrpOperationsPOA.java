package org.omg.BasicCmIRPSystem;


/**
* org.omg.BasicCmIRPSystem/BasicCmIrpOperationsPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from BasicCMIRPSystem.idl
* jueves 5 de septiembre de 2019 02:15:12 AM CDT
*/


/**
     * The BasicCmIrpOperations interface.
     * Supports a number of Resource Model versions.
     */
public abstract class BasicCmIrpOperationsPOA extends org.omg.PortableServer.Servant
 implements BasicCmIrpOperationsOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("get_basicCm_IRP_version", new Integer (0));
    _methods.put ("get_basicCm_IRP_operation_profile", new Integer (1));
    _methods.put ("get_basicCm_IRP_notification_profile", new Integer (2));
    _methods.put ("find_managed_objects", new Integer (3));
    _methods.put ("create_managed_object", new Integer (4));
    _methods.put ("delete_managed_objects", new Integer (5));
    _methods.put ("modify_managed_objects", new Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
        * Get the version(s) of the interface 
        *
        * @raises GetBasicCmIRPVersion when the system for some reason 
        *   can not return the supported versions. 
        * @returns all supported versions.
        */
       case 0:  // org.omg.BasicCmIRPSystem/BasicCmIrpOperations/get_basicCm_IRP_version
       {
         try {
           String $result[] = null;
           $result = this.get_basicCm_IRP_version ();
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.write (out, $result);
         } catch (GetBasicCmIRPVersion $ex) {
           out = $rh.createExceptionReply ();
           GetBasicCmIRPVersionHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Return the operation profile for a specific Basic CM IRP version.
        *
        * @raises GetBasicCmIRPOperationProfile when the system for some reason
        *   cannot return the supported operations and parameters.
        * @returns the list of all supported operations and their supported
        *   parameters for the specified version.
        */
       case 1:  // org.omg.BasicCmIRPSystem/BasicCmIrpOperations/get_basicCm_IRP_operation_profile
       {
         try {
           String basicCm_IRP_version = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_basicCm_IRP_operation_profile (basicCm_IRP_version);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetBasicCmIRPOperationProfile $ex) {
           out = $rh.createExceptionReply ();
           GetBasicCmIRPOperationProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Return the notification profile for a specific Basic CM IRP version.
        *
        * @raises GetBasicCmIRPNotificationProfile when the system for some
        *   reason cannot return the supported notifications and parameters.
        * @returns the list of all supported notifications and their supported
        *   parameters for the specified version.
        */
       case 2:  // org.omg.BasicCmIRPSystem/BasicCmIrpOperations/get_basicCm_IRP_notification_profile
       {
         try {
           String basicCm_IRP_version = org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.read (in);
           org.omg.ManagedGenericIRPConstDefs.Method $result[] = null;
           $result = this.get_basicCm_IRP_notification_profile (basicCm_IRP_version);
           out = $rh.createReply();
           org.omg.ManagedGenericIRPConstDefs.MethodListHelper.write (out, $result);
         } catch (GetBasicCmIRPNotificationProfile $ex) {
           out = $rh.createExceptionReply ();
           GetBasicCmIRPNotificationProfileHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Performs a containment search, using a SearchControl to
        * control the search and the returned results.
        *
        * All MOs in the scope constitute a set that the filter works on.
        * The result BasicCmInformationIterator contains all matched MOs,
        * with the amount of detail specified in the SearchControl.
        * For the special case when no managed objects are matched in 
        * find_managed_objects, the BasicCmInformationIterator will be returned.
        * Executing the next_basicCmInformations in the 
        * BasicCmInformationIterator will return FALSE for 
        * completion.
        *
        * @parm baseObject The start MO in the containment tree.
        * @parm searchControl the SearchControl to use.
        * @parm requestedAttributes defines which attributes to get.
        *   If this parameter is empty (""),  all attributes shall 
        *   be returned. In this version this is the only supported semantics.
        *   Note that this argument is only
        *   relevant if ResultContents in the search control is 
        *   specifed to NAMES_AND_ATTRIBUTES.
        *  
        * 
        * @raises org.omg.ManagedGenericIRPSystem::ValueNotSupported if a valid but
        * unsupported parameter value is passed. E.g. the contents
        * field in the searchcontrol parameter contains the value NAMES and
        * the optional getContainment IS operation is not supported.
        * @raises UndefinedMOException The MO does not exist.
        * @raises IllegalDNFormatException The dn syntax string is
        * malformed.
        * @raises IllegalScopeTypeException The ScopeType in scope contains
        * an illegal value.
        * @raises IllegalScopeLevelException The scope level is negative
        * (<0).
        * @raises IllegalFilterFormatException The filter string is
        * malformed.
        * @raises FilterComplexityLimit if the filter syntax is correct,
        *   but the filter is too complex to be processed by the IRP agent.
        * @see SearchControl
        * @see BasicCmInformationIterator
        */
       case 3:  // org.omg.BasicCmIRPSystem/BasicCmIrpOperations/find_managed_objects
       {
         try {
           String baseObject = org.omg.BasicCMIRPConstDefs.DNHelper.read (in);
           org.omg.BasicCMIRPConstDefs.SearchControl searchControl = org.omg.BasicCMIRPConstDefs.SearchControlHelper.read (in);
           String requestedAttributes[] = org.omg.BasicCMIRPConstDefs.AttributeNameSetHelper.read (in);
           BasicCmInformationIterator $result = null;
           $result = this.find_managed_objects (baseObject, searchControl, requestedAttributes);
           out = $rh.createReply();
           BasicCmInformationIteratorHelper.write (out, $result);
         } catch (FindManagedObjects $ex) {
           out = $rh.createExceptionReply ();
           FindManagedObjectsHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.ValueNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.ValueNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (UndefinedMOException $ex) {
           out = $rh.createExceptionReply ();
           UndefinedMOExceptionHelper.write (out, $ex);
         } catch (IllegalDNFormatException $ex) {
           out = $rh.createExceptionReply ();
           IllegalDNFormatExceptionHelper.write (out, $ex);
         } catch (UndefinedScopeException $ex) {
           out = $rh.createExceptionReply ();
           UndefinedScopeExceptionHelper.write (out, $ex);
         } catch (IllegalScopeTypeException $ex) {
           out = $rh.createExceptionReply ();
           IllegalScopeTypeExceptionHelper.write (out, $ex);
         } catch (IllegalScopeLevelException $ex) {
           out = $rh.createExceptionReply ();
           IllegalScopeLevelExceptionHelper.write (out, $ex);
         } catch (IllegalFilterFormatException $ex) {
           out = $rh.createExceptionReply ();
           IllegalFilterFormatExceptionHelper.write (out, $ex);
         } catch (FilterComplexityLimit $ex) {
           out = $rh.createExceptionReply ();
           FilterComplexityLimitHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Performs the creation of a MO instance in the MIB maintained
        * by the IRPAgent.
        *
        * @parm objectName: the distinguished name of the MO to create.
        * @parm referenceObject: the distinguished name of a reference MO.
        * @parm attributes: in input, initial attribute values for the MO to
        *   create; in output, actual attribute values of the created MO.
        * @parm attributeErrors: errors, related to attributes, that caused the
        *   creation of the MO to fail.
        *
        * @raises org.omg.ManagedGenericIRPSystem::OperationNotSupported: The operation
        *   is not supported.
        * @raises org.omg.ManagedGenericIRPSystem::ParameterNotSupported: An optional
        *   parameter is not supported.
        * @raises org.omg.ManagedGenericIRPSystem::InvalidParameter: An invalid
        *   parameter value has been provided.
        * @raises UndefinedMOException: The MO does not exist.
        * @raises IllegalDNFormatException: The DN syntax string is malformed.
        * @raises DuplicateMO: A MO already exist with the same DN as the one
        *   to create.
        * @raises CreateNotAllowed: The creation of the MO is not allowed.
        * @raises ObjectClassMismatch: The object class of the MO to create does
        *   not match with the object class of the provided reference MO.
        * @raises NoSuchObjectClass: The class of the object to create is not
        *   recognized.
        * @raises ParentObjectDoesNotExist: The parent MO instance of the
        *  ManagedEntity specified to be created does not exist.
        */
       case 4:  // org.omg.BasicCmIRPSystem/BasicCmIrpOperations/create_managed_object
       {
         try {
           String objectName = org.omg.BasicCMIRPConstDefs.DNHelper.read (in);
           String referenceObject = org.omg.BasicCMIRPConstDefs.DNHelper.read (in);
           org.omg.BasicCMIRPConstDefs.MOAttributeSetHolder attributes = new org.omg.BasicCMIRPConstDefs.MOAttributeSetHolder ();
           attributes.value = org.omg.BasicCMIRPConstDefs.MOAttributeSetHelper.read (in);
           org.omg.BasicCMIRPConstDefs.AttributeErrorSeqHolder attributeErrors = new org.omg.BasicCMIRPConstDefs.AttributeErrorSeqHolder ();
           this.create_managed_object (objectName, referenceObject, attributes, attributeErrors);
           out = $rh.createReply();
           org.omg.BasicCMIRPConstDefs.MOAttributeSetHelper.write (out, attributes.value);
           org.omg.BasicCMIRPConstDefs.AttributeErrorSeqHelper.write (out, attributeErrors.value);
         } catch (CreateManagedObject $ex) {
           out = $rh.createExceptionReply ();
           CreateManagedObjectHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.ParameterNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (UndefinedMOException $ex) {
           out = $rh.createExceptionReply ();
           UndefinedMOExceptionHelper.write (out, $ex);
         } catch (IllegalDNFormatException $ex) {
           out = $rh.createExceptionReply ();
           IllegalDNFormatExceptionHelper.write (out, $ex);
         } catch (DuplicateMO $ex) {
           out = $rh.createExceptionReply ();
           DuplicateMOHelper.write (out, $ex);
         } catch (CreateNotAllowed $ex) {
           out = $rh.createExceptionReply ();
           CreateNotAllowedHelper.write (out, $ex);
         } catch (ObjectClassMismatch $ex) {
           out = $rh.createExceptionReply ();
           ObjectClassMismatchHelper.write (out, $ex);
         } catch (NoSuchObjectClass $ex) {
           out = $rh.createExceptionReply ();
           NoSuchObjectClassHelper.write (out, $ex);
         } catch (ParentObjectDoesNotExist $ex) {
           out = $rh.createExceptionReply ();
           ParentObjectDoesNotExistHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Performs the deletion of one or more MO instances from the MIB
        * maintained by the IRPAgent, using a SearchControl to control the
        * instances to be deleted.
        *
        * All MOs in the scope constitute a set that the filter works on.
        * All matched MOs will be deleted by this operation.
        * The returned DeleteResultIterator is used to retrieve the DNs of the
        * MOs deleted and the errors that may have occurred preventing deletion
        * of some MOs.
        * For the special case when no managed objects are matched in 
        * delete_managed_objects, the DeleteResultIterator will be returned.
        * Executing the next_basicCmInformations in the DeleteResultIterator
        * will return FALSE for completion.
        *
        * @parm baseObject: the start MO in the containment tree.
        * @parm searchControl: the SearchControl to use; field "contents" has no
        *   meaning here and shall be ignored.
         @returns: a DeleteResultIterator (see above).
        *
        * @raises org.omg.ManagedGenericIRPSystem::OperationNotSupported: The operation
        *   is not supported.
        * @raises org.omg.ManagedGenericIRPSystem::InvalidParameter: An invalid
        *   parameter value has been provided.
        * @raises UndefinedMOException: The MO does not exist.
        * @raises IllegalDNFormatException: The DN syntax string is malformed.
        * @raises IllegalScopeTypeException: The ScopeType in scope contains
        *   an illegal value.
        * @raises IllegalScopeLevelException: The scope level is negative (<0).
        * @raises IllegalFilterFormatException: The filter string is malformed.
        * @raises FilterComplexityLimit: The filter syntax is correct,
        *   but the filter is too complex to be processed by the IRPAgent.
        */
       case 5:  // org.omg.BasicCmIRPSystem/BasicCmIrpOperations/delete_managed_objects
       {
         try {
           String baseObject = org.omg.BasicCMIRPConstDefs.DNHelper.read (in);
           org.omg.BasicCMIRPConstDefs.SearchControl searchControl = org.omg.BasicCMIRPConstDefs.SearchControlHelper.read (in);
           DeleteResultIterator $result = null;
           $result = this.delete_managed_objects (baseObject, searchControl);
           out = $rh.createReply();
           DeleteResultIteratorHelper.write (out, $result);
         } catch (DeleteManagedObjects $ex) {
           out = $rh.createExceptionReply ();
           DeleteManagedObjectsHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (UndefinedMOException $ex) {
           out = $rh.createExceptionReply ();
           UndefinedMOExceptionHelper.write (out, $ex);
         } catch (IllegalDNFormatException $ex) {
           out = $rh.createExceptionReply ();
           IllegalDNFormatExceptionHelper.write (out, $ex);
         } catch (UndefinedScopeException $ex) {
           out = $rh.createExceptionReply ();
           UndefinedScopeExceptionHelper.write (out, $ex);
         } catch (IllegalScopeTypeException $ex) {
           out = $rh.createExceptionReply ();
           IllegalScopeTypeExceptionHelper.write (out, $ex);
         } catch (IllegalScopeLevelException $ex) {
           out = $rh.createExceptionReply ();
           IllegalScopeLevelExceptionHelper.write (out, $ex);
         } catch (IllegalFilterFormatException $ex) {
           out = $rh.createExceptionReply ();
           IllegalFilterFormatExceptionHelper.write (out, $ex);
         } catch (FilterComplexityLimit $ex) {
           out = $rh.createExceptionReply ();
           FilterComplexityLimitHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Performs the modification of MO attributes. One or more MOs attributes
        * may be modified according to a SearchControl.
        *
        * All MOs in the scope constitute a set that the filter works on.
        * All matched MOs will have their attributes modified by this operation.
        * The returned ModifyResultIterator is used to retrieve the DNs of the
        * modified MOs together with the values of the modified attributes, and
        * the errors that may have occurred preventing modification of some
        * attributes.
        * For the special case when no managed objects are matched in 
        * modify_managed_objects, the ModifyResultIterator will be returned.
        * Executing the next_basicCmInformations in the ModifyResultIterator
        * will return FALSE for completion.
        *
        * @parm baseObject: the start MO in the containment tree.
        * @parm searchControl: the SearchControl to use; field "contents" has no
            meaning here and shall be ignored.
        * @parm modifications: the values for the attributes to modify and
            the way those values are to be applied to the attributes.
         @returns: a ModifyResultIterator (see above).
        *
        * @raises org.omg.ManagedGenericIRPSystem::OperationNotSupported: The operation
        *   is not supported
        * @raises org.omg.ManagedGenericIRPSystem::InvalidParameter: An invalid
        *   parameter value has been provided
        * @raises UndefinedMOException: The MO does not exist.
        * @raises IllegalDNFormatException: The DN syntax string is malformed.
        * @raises IllegalScopeTypeException: The ScopeType in scope contains
        *   an illegal value.
        * @raises IllegalScopeLevelException: The scope level is negative (<0).
        * @raises IllegalFilterFormatException: The filter string is malformed.
        * @raises FilterComplexityLimit: The filter syntax is correct,
        *   but the filter is too complex to be processed by the IRPAgent.
        */
       case 6:  // org.omg.BasicCmIRPSystem/BasicCmIrpOperations/modify_managed_objects
       {
         try {
           String baseObject = org.omg.BasicCMIRPConstDefs.DNHelper.read (in);
           org.omg.BasicCMIRPConstDefs.SearchControl searchControl = org.omg.BasicCMIRPConstDefs.SearchControlHelper.read (in);
           org.omg.BasicCMIRPConstDefs.AttributeModification modifications[] = org.omg.BasicCMIRPConstDefs.AttributeModificationSetHelper.read (in);
           ModifyResultIterator $result = null;
           $result = this.modify_managed_objects (baseObject, searchControl, modifications);
           out = $rh.createReply();
           ModifyResultIteratorHelper.write (out, $result);
         } catch (ModifyManagedObjects $ex) {
           out = $rh.createExceptionReply ();
           ModifyManagedObjectsHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.OperationNotSupported $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.write (out, $ex);
         } catch (org.omg.ManagedGenericIRPSystem.InvalidParameter $ex) {
           out = $rh.createExceptionReply ();
           org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.write (out, $ex);
         } catch (UndefinedMOException $ex) {
           out = $rh.createExceptionReply ();
           UndefinedMOExceptionHelper.write (out, $ex);
         } catch (IllegalDNFormatException $ex) {
           out = $rh.createExceptionReply ();
           IllegalDNFormatExceptionHelper.write (out, $ex);
         } catch (UndefinedScopeException $ex) {
           out = $rh.createExceptionReply ();
           UndefinedScopeExceptionHelper.write (out, $ex);
         } catch (IllegalScopeTypeException $ex) {
           out = $rh.createExceptionReply ();
           IllegalScopeTypeExceptionHelper.write (out, $ex);
         } catch (IllegalScopeLevelException $ex) {
           out = $rh.createExceptionReply ();
           IllegalScopeLevelExceptionHelper.write (out, $ex);
         } catch (IllegalFilterFormatException $ex) {
           out = $rh.createExceptionReply ();
           IllegalFilterFormatExceptionHelper.write (out, $ex);
         } catch (FilterComplexityLimit $ex) {
           out = $rh.createExceptionReply ();
           FilterComplexityLimitHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/BasicCmIRPSystem/BasicCmIrpOperations:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public BasicCmIrpOperations _this() 
  {
    return BasicCmIrpOperationsHelper.narrow(
    super._this_object());
  }

  public BasicCmIrpOperations _this(org.omg.CORBA.ORB orb) 
  {
    return BasicCmIrpOperationsHelper.narrow(
    super._this_object(orb));
  }


} // class BasicCmIrpOperationsPOA
