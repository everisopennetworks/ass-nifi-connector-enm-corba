package org.omg.BasicCmIRPSystem;


/**
* org.omg.BasicCmIRPSystem/_BasicCmIrpOperationsStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from BasicCMIRPSystem.idl
* jueves 5 de septiembre de 2019 02:15:12 AM CDT
*/


/**
     * The BasicCmIrpOperations interface.
     * Supports a number of Resource Model versions.
     */
public class _BasicCmIrpOperationsStub extends org.omg.CORBA.portable.ObjectImpl implements BasicCmIrpOperations
{


  /**
        * Get the version(s) of the interface 
        *
        * @raises GetBasicCmIRPVersion when the system for some reason 
        *   can not return the supported versions. 
        * @returns all supported versions.
        */
  public String[] get_basicCm_IRP_version () throws GetBasicCmIRPVersion
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_basicCm_IRP_version", true);
                $in = _invoke ($out);
                String $result[] = org.omg.ManagedGenericIRPConstDefs.VersionNumberSetHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/GetBasicCmIRPVersion:1.0"))
                    throw GetBasicCmIRPVersionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_basicCm_IRP_version (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_basicCm_IRP_version


  /**
        * Return the operation profile for a specific Basic CM IRP version.
        *
        * @raises GetBasicCmIRPOperationProfile when the system for some reason
        *   cannot return the supported operations and parameters.
        * @returns the list of all supported operations and their supported
        *   parameters for the specified version.
        */
  public org.omg.ManagedGenericIRPConstDefs.Method[] get_basicCm_IRP_operation_profile (String basicCm_IRP_version) throws GetBasicCmIRPOperationProfile, org.omg.ManagedGenericIRPSystem.OperationNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_basicCm_IRP_operation_profile", true);
                org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.write ($out, basicCm_IRP_version);
                $in = _invoke ($out);
                org.omg.ManagedGenericIRPConstDefs.Method $result[] = org.omg.ManagedGenericIRPConstDefs.MethodListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/GetBasicCmIRPOperationProfile:1.0"))
                    throw GetBasicCmIRPOperationProfileHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_basicCm_IRP_operation_profile (basicCm_IRP_version        );
            } finally {
                _releaseReply ($in);
            }
  } // get_basicCm_IRP_operation_profile


  /**
        * Return the notification profile for a specific Basic CM IRP version.
        *
        * @raises GetBasicCmIRPNotificationProfile when the system for some
        *   reason cannot return the supported notifications and parameters.
        * @returns the list of all supported notifications and their supported
        *   parameters for the specified version.
        */
  public org.omg.ManagedGenericIRPConstDefs.Method[] get_basicCm_IRP_notification_profile (String basicCm_IRP_version) throws GetBasicCmIRPNotificationProfile, org.omg.ManagedGenericIRPSystem.OperationNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_basicCm_IRP_notification_profile", true);
                org.omg.ManagedGenericIRPConstDefs.VersionNumberHelper.write ($out, basicCm_IRP_version);
                $in = _invoke ($out);
                org.omg.ManagedGenericIRPConstDefs.Method $result[] = org.omg.ManagedGenericIRPConstDefs.MethodListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/GetBasicCmIRPNotificationProfile:1.0"))
                    throw GetBasicCmIRPNotificationProfileHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_basicCm_IRP_notification_profile (basicCm_IRP_version        );
            } finally {
                _releaseReply ($in);
            }
  } // get_basicCm_IRP_notification_profile


  /**
        * Performs a containment search, using a SearchControl to
        * control the search and the returned results.
        *
        * All MOs in the scope constitute a set that the filter works on.
        * The result BasicCmInformationIterator contains all matched MOs,
        * with the amount of detail specified in the SearchControl.
        * For the special case when no managed objects are matched in 
        * find_managed_objects, the BasicCmInformationIterator will be returned.
        * Executing the next_basicCmInformations in the 
        * BasicCmInformationIterator will return FALSE for 
        * completion.
        *
        * @parm baseObject The start MO in the containment tree.
        * @parm searchControl the SearchControl to use.
        * @parm requestedAttributes defines which attributes to get.
        *   If this parameter is empty (""),  all attributes shall 
        *   be returned. In this version this is the only supported semantics.
        *   Note that this argument is only
        *   relevant if ResultContents in the search control is 
        *   specifed to NAMES_AND_ATTRIBUTES.
        *  
        * 
        * @raises org.omg.ManagedGenericIRPSystem::ValueNotSupported if a valid but
        * unsupported parameter value is passed. E.g. the contents
        * field in the searchcontrol parameter contains the value NAMES and
        * the optional getContainment IS operation is not supported.
        * @raises UndefinedMOException The MO does not exist.
        * @raises IllegalDNFormatException The dn syntax string is
        * malformed.
        * @raises IllegalScopeTypeException The ScopeType in scope contains
        * an illegal value.
        * @raises IllegalScopeLevelException The scope level is negative
        * (<0).
        * @raises IllegalFilterFormatException The filter string is
        * malformed.
        * @raises FilterComplexityLimit if the filter syntax is correct,
        *   but the filter is too complex to be processed by the IRP agent.
        * @see SearchControl
        * @see BasicCmInformationIterator
        */
  public BasicCmInformationIterator find_managed_objects (String baseObject, org.omg.BasicCMIRPConstDefs.SearchControl searchControl, String[] requestedAttributes) throws FindManagedObjects, org.omg.ManagedGenericIRPSystem.ParameterNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter, org.omg.ManagedGenericIRPSystem.ValueNotSupported, org.omg.ManagedGenericIRPSystem.OperationNotSupported, UndefinedMOException, IllegalDNFormatException, UndefinedScopeException, IllegalScopeTypeException, IllegalScopeLevelException, IllegalFilterFormatException, FilterComplexityLimit
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("find_managed_objects", true);
                org.omg.BasicCMIRPConstDefs.DNHelper.write ($out, baseObject);
                org.omg.BasicCMIRPConstDefs.SearchControlHelper.write ($out, searchControl);
                org.omg.BasicCMIRPConstDefs.AttributeNameSetHelper.write ($out, requestedAttributes);
                $in = _invoke ($out);
                BasicCmInformationIterator $result = BasicCmInformationIteratorHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/FindManagedObjects:1.0"))
                    throw FindManagedObjectsHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/ParameterNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/ValueNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.ValueNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/UndefinedMOException:1.0"))
                    throw UndefinedMOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalDNFormatException:1.0"))
                    throw IllegalDNFormatExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/UndefinedScopeException:1.0"))
                    throw UndefinedScopeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalScopeTypeException:1.0"))
                    throw IllegalScopeTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalScopeLevelException:1.0"))
                    throw IllegalScopeLevelExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalFilterFormatException:1.0"))
                    throw IllegalFilterFormatExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/FilterComplexityLimit:1.0"))
                    throw FilterComplexityLimitHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return find_managed_objects (baseObject, searchControl, requestedAttributes        );
            } finally {
                _releaseReply ($in);
            }
  } // find_managed_objects


  /**
        * Performs the creation of a MO instance in the MIB maintained
        * by the IRPAgent.
        *
        * @parm objectName: the distinguished name of the MO to create.
        * @parm referenceObject: the distinguished name of a reference MO.
        * @parm attributes: in input, initial attribute values for the MO to
        *   create; in output, actual attribute values of the created MO.
        * @parm attributeErrors: errors, related to attributes, that caused the
        *   creation of the MO to fail.
        *
        * @raises org.omg.ManagedGenericIRPSystem::OperationNotSupported: The operation
        *   is not supported.
        * @raises org.omg.ManagedGenericIRPSystem::ParameterNotSupported: An optional
        *   parameter is not supported.
        * @raises org.omg.ManagedGenericIRPSystem::InvalidParameter: An invalid
        *   parameter value has been provided.
        * @raises UndefinedMOException: The MO does not exist.
        * @raises IllegalDNFormatException: The DN syntax string is malformed.
        * @raises DuplicateMO: A MO already exist with the same DN as the one
        *   to create.
        * @raises CreateNotAllowed: The creation of the MO is not allowed.
        * @raises ObjectClassMismatch: The object class of the MO to create does
        *   not match with the object class of the provided reference MO.
        * @raises NoSuchObjectClass: The class of the object to create is not
        *   recognized.
        * @raises ParentObjectDoesNotExist: The parent MO instance of the
        *  ManagedEntity specified to be created does not exist.
        */
  public void create_managed_object (String objectName, String referenceObject, org.omg.BasicCMIRPConstDefs.MOAttributeSetHolder attributes, org.omg.BasicCMIRPConstDefs.AttributeErrorSeqHolder attributeErrors) throws CreateManagedObject, org.omg.ManagedGenericIRPSystem.OperationNotSupported, org.omg.ManagedGenericIRPSystem.ParameterNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter, UndefinedMOException, IllegalDNFormatException, DuplicateMO, CreateNotAllowed, ObjectClassMismatch, NoSuchObjectClass, ParentObjectDoesNotExist
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_managed_object", true);
                org.omg.BasicCMIRPConstDefs.DNHelper.write ($out, objectName);
                org.omg.BasicCMIRPConstDefs.DNHelper.write ($out, referenceObject);
                org.omg.BasicCMIRPConstDefs.MOAttributeSetHelper.write ($out, attributes.value);
                $in = _invoke ($out);
                attributes.value = org.omg.BasicCMIRPConstDefs.MOAttributeSetHelper.read ($in);
                attributeErrors.value = org.omg.BasicCMIRPConstDefs.AttributeErrorSeqHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/CreateManagedObject:1.0"))
                    throw CreateManagedObjectHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/ParameterNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.ParameterNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/UndefinedMOException:1.0"))
                    throw UndefinedMOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalDNFormatException:1.0"))
                    throw IllegalDNFormatExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/DuplicateMO:1.0"))
                    throw DuplicateMOHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/CreateNotAllowed:1.0"))
                    throw CreateNotAllowedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/ObjectClassMismatch:1.0"))
                    throw ObjectClassMismatchHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/NoSuchObjectClass:1.0"))
                    throw NoSuchObjectClassHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/ParentObjectDoesNotExist:1.0"))
                    throw ParentObjectDoesNotExistHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                create_managed_object (objectName, referenceObject, attributes, attributeErrors        );
            } finally {
                _releaseReply ($in);
            }
  } // create_managed_object


  /**
        * Performs the deletion of one or more MO instances from the MIB
        * maintained by the IRPAgent, using a SearchControl to control the
        * instances to be deleted.
        *
        * All MOs in the scope constitute a set that the filter works on.
        * All matched MOs will be deleted by this operation.
        * The returned DeleteResultIterator is used to retrieve the DNs of the
        * MOs deleted and the errors that may have occurred preventing deletion
        * of some MOs.
        * For the special case when no managed objects are matched in 
        * delete_managed_objects, the DeleteResultIterator will be returned.
        * Executing the next_basicCmInformations in the DeleteResultIterator
        * will return FALSE for completion.
        *
        * @parm baseObject: the start MO in the containment tree.
        * @parm searchControl: the SearchControl to use; field "contents" has no
        *   meaning here and shall be ignored.
         @returns: a DeleteResultIterator (see above).
        *
        * @raises org.omg.ManagedGenericIRPSystem::OperationNotSupported: The operation
        *   is not supported.
        * @raises org.omg.ManagedGenericIRPSystem::InvalidParameter: An invalid
        *   parameter value has been provided.
        * @raises UndefinedMOException: The MO does not exist.
        * @raises IllegalDNFormatException: The DN syntax string is malformed.
        * @raises IllegalScopeTypeException: The ScopeType in scope contains
        *   an illegal value.
        * @raises IllegalScopeLevelException: The scope level is negative (<0).
        * @raises IllegalFilterFormatException: The filter string is malformed.
        * @raises FilterComplexityLimit: The filter syntax is correct,
        *   but the filter is too complex to be processed by the IRPAgent.
        */
  public DeleteResultIterator delete_managed_objects (String baseObject, org.omg.BasicCMIRPConstDefs.SearchControl searchControl) throws DeleteManagedObjects, org.omg.ManagedGenericIRPSystem.OperationNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter, UndefinedMOException, IllegalDNFormatException, UndefinedScopeException, IllegalScopeTypeException, IllegalScopeLevelException, IllegalFilterFormatException, FilterComplexityLimit
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete_managed_objects", true);
                org.omg.BasicCMIRPConstDefs.DNHelper.write ($out, baseObject);
                org.omg.BasicCMIRPConstDefs.SearchControlHelper.write ($out, searchControl);
                $in = _invoke ($out);
                DeleteResultIterator $result = DeleteResultIteratorHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/DeleteManagedObjects:1.0"))
                    throw DeleteManagedObjectsHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/UndefinedMOException:1.0"))
                    throw UndefinedMOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalDNFormatException:1.0"))
                    throw IllegalDNFormatExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/UndefinedScopeException:1.0"))
                    throw UndefinedScopeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalScopeTypeException:1.0"))
                    throw IllegalScopeTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalScopeLevelException:1.0"))
                    throw IllegalScopeLevelExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalFilterFormatException:1.0"))
                    throw IllegalFilterFormatExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/FilterComplexityLimit:1.0"))
                    throw FilterComplexityLimitHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return delete_managed_objects (baseObject, searchControl        );
            } finally {
                _releaseReply ($in);
            }
  } // delete_managed_objects


  /**
        * Performs the modification of MO attributes. One or more MOs attributes
        * may be modified according to a SearchControl.
        *
        * All MOs in the scope constitute a set that the filter works on.
        * All matched MOs will have their attributes modified by this operation.
        * The returned ModifyResultIterator is used to retrieve the DNs of the
        * modified MOs together with the values of the modified attributes, and
        * the errors that may have occurred preventing modification of some
        * attributes.
        * For the special case when no managed objects are matched in 
        * modify_managed_objects, the ModifyResultIterator will be returned.
        * Executing the next_basicCmInformations in the ModifyResultIterator
        * will return FALSE for completion.
        *
        * @parm baseObject: the start MO in the containment tree.
        * @parm searchControl: the SearchControl to use; field "contents" has no
            meaning here and shall be ignored.
        * @parm modifications: the values for the attributes to modify and
            the way those values are to be applied to the attributes.
         @returns: a ModifyResultIterator (see above).
        *
        * @raises org.omg.ManagedGenericIRPSystem::OperationNotSupported: The operation
        *   is not supported
        * @raises org.omg.ManagedGenericIRPSystem::InvalidParameter: An invalid
        *   parameter value has been provided
        * @raises UndefinedMOException: The MO does not exist.
        * @raises IllegalDNFormatException: The DN syntax string is malformed.
        * @raises IllegalScopeTypeException: The ScopeType in scope contains
        *   an illegal value.
        * @raises IllegalScopeLevelException: The scope level is negative (<0).
        * @raises IllegalFilterFormatException: The filter string is malformed.
        * @raises FilterComplexityLimit: The filter syntax is correct,
        *   but the filter is too complex to be processed by the IRPAgent.
        */
  public ModifyResultIterator modify_managed_objects (String baseObject, org.omg.BasicCMIRPConstDefs.SearchControl searchControl, org.omg.BasicCMIRPConstDefs.AttributeModification[] modifications) throws ModifyManagedObjects, org.omg.ManagedGenericIRPSystem.OperationNotSupported, org.omg.ManagedGenericIRPSystem.InvalidParameter, UndefinedMOException, IllegalDNFormatException, UndefinedScopeException, IllegalScopeTypeException, IllegalScopeLevelException, IllegalFilterFormatException, FilterComplexityLimit
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("modify_managed_objects", true);
                org.omg.BasicCMIRPConstDefs.DNHelper.write ($out, baseObject);
                org.omg.BasicCMIRPConstDefs.SearchControlHelper.write ($out, searchControl);
                org.omg.BasicCMIRPConstDefs.AttributeModificationSetHelper.write ($out, modifications);
                $in = _invoke ($out);
                ModifyResultIterator $result = ModifyResultIteratorHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/ModifyManagedObjects:1.0"))
                    throw ModifyManagedObjectsHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/OperationNotSupported:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.OperationNotSupportedHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/ManagedGenericIRPSystem/InvalidParameter:1.0"))
                    throw org.omg.ManagedGenericIRPSystem.InvalidParameterHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/UndefinedMOException:1.0"))
                    throw UndefinedMOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalDNFormatException:1.0"))
                    throw IllegalDNFormatExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/UndefinedScopeException:1.0"))
                    throw UndefinedScopeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalScopeTypeException:1.0"))
                    throw IllegalScopeTypeExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalScopeLevelException:1.0"))
                    throw IllegalScopeLevelExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/IllegalFilterFormatException:1.0"))
                    throw IllegalFilterFormatExceptionHelper.read ($in);
                else if (_id.equals ("IDL:3gppsa5.org/BasicCmIRPSystem/FilterComplexityLimit:1.0"))
                    throw FilterComplexityLimitHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return modify_managed_objects (baseObject, searchControl, modifications        );
            } finally {
                _releaseReply ($in);
            }
  } // modify_managed_objects

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:3gppsa5.org/BasicCmIRPSystem/BasicCmIrpOperations:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _BasicCmIrpOperationsStub
